# Task ID: 4
# Title: Develop avatar generation service (OpenAI)
# Status: in-progress
# Dependencies: 3
# Priority: high
# Description: Create a service to transform selfies into comic avatars using OpenAI DALL-E
# Details:
Implement a service that uses the OpenAI API (DALL-E 3 or DALL-E 2 for editing) to generate a full-body comic avatar at 1024x1024 resolution. Create appropriate prompts, potentially using the uploaded selfie URL or data via the edit endpoint. Handle API responses and store the resulting avatar URL in the database, associated with the user and original image. Handle error cases and provide appropriate feedback. Implement compensation logic to refund credits on failed generations.

# Test Strategy:
Test with various selfie inputs and prompts. Verify successful API calls to OpenAI and proper handling of responses. Test prompt variations. Confirm proper storage of avatar URLs in the database. Test error handling for failed generations. Verify credit refund process works correctly when avatar generation fails.

# Subtasks:
## 4.1. OpenAI API Integration for Image Generation [in-progress]
### Dependencies: None
### Description: Implement the integration with OpenAI's API (DALL-E) for avatar generation
### Details:
Set up the OpenAI Node.js client. Implement authentication using the OPENAI_API_KEY environment variable. Implement functions to call the image generation (or edit) endpoint with appropriate parameters (model, prompt, size, image input if using edit). Implement basic error handling for API responses.

## 4.2. System Prompt Design [in-progress]
### Dependencies: None
### Description: Design and implement effective prompts for comic avatar generation using DALL-E
### Details:
Research optimal prompting techniques for DALL-E 3 (or DALL-E 2 if editing). Design prompts that consistently produce full-body comic avatars at 1024x1024 resolution. Test various prompt formulations to ensure consistent quality and style. Consider how to incorporate user selfie details if using the edit endpoint.

## 4.3. Async Handling / Polling (If Needed) [completed]
### Dependencies: None
### Description: Implement job status polling or async handling if OpenAI calls are long-running
### Details:
Determine if OpenAI API calls require asynchronous handling. If so, implement a mechanism (e.g., API endpoint returning job ID, frontend polling, or Temporal workflow activity) to check generation status. Handle timeouts appropriately.

## 4.4. Avatar Asset Storage [pending]
### Dependencies: None
### Description: Implement storage for generated avatar assets
### Details:
Store the avatar URL returned by OpenAI in the Avatar database record. Ensure association with the user and the original Image record. Consider if the generated image needs to be downloaded from OpenAI and stored in our own storage (MinIO) for persistence or CDN delivery, or if linking directly to the OpenAI URL is sufficient (URLs expire). Implement cleanup logic if storing locally.

## 4.5. Error Handling [pending]
### Dependencies: None
### Description: Implement comprehensive error handling for the avatar generation process
### Details:
Create error classification system for different failure modes (API errors, invalid prompts, content policy violations, etc.). Implement appropriate user-facing error messages. Log detailed error information. Create monitoring alerts for critical error patterns. Ensure failed states are recorded in the database (e.g., Avatar status field, RenderHistory).

## 4.6. Compensation Logic [pending]
### Dependencies: None
### Description: Implement credit refund system for failed generations
### Details:
Create a compensation service or logic to refund credits when avatar generation fails (e.g., OpenAI API error, content policy violation). Implement transaction logging for all credit refunds. Add admin dashboard component to review and manage compensation events. Ensure proper synchronization to prevent duplicate refunds.


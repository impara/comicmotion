# Task ID: 6
# Title: Build scene generation service
# Status: pending
# Dependencies: 4, 5
# Priority: high
# Description: Create a service to generate themed backgrounds with the avatar
# Details:
Implement a service that takes the generated avatar URL and selected theme to create a 1920x1080 scene using Replicate's API. Create theme-specific prompts for each available theme option. Implement polling mechanism to check job status. Store the resulting scene URL and associate it with the user's session. Handle error cases and provide appropriate feedback. Ensure the avatar is properly integrated into the scene.

# Test Strategy:
Test scene generation with different avatar and theme combinations. Verify API calls to Replicate work correctly. Test polling mechanism and error handling. Confirm proper storage of scene URLs. Verify scene dimensions and quality meet requirements.

# Subtasks:
## 6.1. Design and implement scene generation API [pending]
### Dependencies: None
### Description: Create API endpoints to handle scene generation requests
### Details:
Design RESTful API endpoints for scene generation that accept avatar URL and theme parameters. Implement input validation and sanitization. Create proper response structures for both synchronous and asynchronous operations.

## 6.2. Develop theme-specific prompt templates [pending]
### Dependencies: None
### Description: Create and test prompts for each supported theme
### Details:
Develop a library of prompt templates for each available theme. Create a prompt injection system that properly positions the avatar within the scene context. Test prompts with various avatar types to ensure consistent quality. Document prompt structures for future theme additions.

## 6.3. Implement Replicate API integration [pending]
### Dependencies: None
### Description: Connect to Replicate's API for scene generation
### Details:
Set up authentication with Replicate API. Implement the API client for submitting scene generation jobs. Configure request parameters to ensure 1920x1080 output. Test API responses and handle rate limiting appropriately.

## 6.4. Build polling and retry mechanism [pending]
### Dependencies: None
### Description: Create a robust system to check job status and handle retries
### Details:
Implement a polling system to check Replicate job status at appropriate intervals. Create exponential backoff strategy for retries. Set maximum retry attempts and timeout thresholds. Log all polling events for debugging purposes.

## 6.5. Develop asset storage system [pending]
### Dependencies: None
### Description: Store and manage generated scene images
### Details:
Implement storage solution for scene images. Create a database schema to associate scenes with user sessions. Develop cleanup processes for abandoned or expired scenes. Configure appropriate caching headers for efficient delivery.

## 6.6. Implement comprehensive error handling [pending]
### Dependencies: None
### Description: Handle all potential failure scenarios
### Details:
Create error handling for API failures, timeout conditions, and invalid inputs. Implement user-friendly error messages. Set up logging for all error conditions. Create monitoring alerts for critical failures.

## 6.7. Develop compensation/rollback mechanism [pending]
### Dependencies: None
### Description: Handle failures by rolling back avatar generation if needed
### Details:
Implement a compensation pattern to handle scene generation failures. Create logic to determine when to rollback avatar generation. Ensure proper cleanup of resources in failure scenarios. Test rollback functionality under various error conditions.

## 6.8. Integrate scene generation with user flow [pending]
### Dependencies: None
### Description: Connect scene generation service with the overall application flow
### Details:
Integrate scene generation into the main application workflow. Update UI to display scene generation status. Implement transitions between avatar creation and scene generation. Test end-to-end user flow with various scenarios.

